/Users/brianoneill/_VENVs/GEN_3.4/bin/python /Users/brianoneill/Desktop/Programming/Python-package-staging/log_calls/log_calls/tests/test_log_calls.py
===============================
testing descriptors:
About to try 'd['nosuchsetting'] = True'
Expected exception: "DecoSettingsMapping.__setitem__: KeyError - no such setting (key) as 'nosuchsetting'"
d.enabled = False
d.log_retval = True
d.log_exit = False
d.log_args = log_args=
d.prefix = ''
d.logger = logger_=
d.loglevel = 10
d.args_sep = 'sep_='
-------full set of changes via __set__ of every descriptor
myfunc.log_calls_settings = {'log_args': 'different_log_args_kwd=', 'log_exit': True, 'loglevel': 50, 'prefix': 'felix.', 'logger': 'different_logger_kwd=', 'args_sep': 'different_args_sep=', 'log_retval': False, 'enabled': 17}
Exception ''DecoSettingsMapping' object has no attribute 'nosuchattribute'' caused by 'd.nosuchattribute'
Doing 'd.nosuchattribute = 519'
No exception raised,
but 'nosuchattribute' does NOT wind up among the settings managed by log_call_settings:
myfunc.log_calls_settings = {'log_args': 'different_log_args_kwd=', 'log_exit': True, 'loglevel': 50, 'prefix': 'felix.', 'logger': 'different_logger_kwd=', 'args_sep': 'different_args_sep=', 'log_retval': False, 'enabled': 17}
==================================
settings, as_dict: {'log_args': 'different_log_args_kwd=', 'log_exit': True, 'loglevel': 50, 'prefix': 'felix.', 'logger': 'different_logger_kwd=', 'args_sep': 'different_args_sep=', 'log_retval': False, 'enabled': 17}
{'log_args': 'different_log_args_kwd=', 'log_exit': True, 'loglevel': 50, 'prefix': 'prix-fixe.', 'logger': 'different_logger_kwd=', 'args_sep': 'different_args_sep=', 'log_retval': False, 'enabled': True}
len = 8
myfunc.log_calls_settings as list: ['log_args', 'log_exit', 'loglevel', 'prefix', 'logger', 'args_sep', 'log_retval', 'enabled']
for x in myfunc.log_calls_settings: print(x)
log_args
log_exit
loglevel
prefix
logger
args_sep
log_retval
enabled
_get_tagged_value for 'log_args': (True, 'different_log_args_kwd')
for k, v in myfunc.log_calls_settings.items(): print(k, v)
log_args = different_log_args_kwd=
log_exit = True
loglevel = 50
prefix = prix-fixe.
logger = different_logger_kwd=
args_sep = different_args_sep=
log_retval = False
enabled = True
DecoSettingsMapping(
    [
        DecoSetting(log_args, bool, True, allow_falsy=True, allow_indirect=True),
        DecoSetting(log_exit, bool, True, allow_falsy=True, allow_indirect=True),
        DecoSetting(loglevel, int, 10, allow_falsy=False, allow_indirect=True),
        DecoSetting(prefix, str, '', allow_falsy=True, allow_indirect=False),
        DecoSetting(logger, logging.Logger, None, allow_falsy=True, allow_indirect=True),
        DecoSetting(args_sep, str, ', ', allow_falsy=False, allow_indirect=True),
        DecoSetting(log_retval, bool, False, allow_falsy=True, allow_indirect=True),
        DecoSetting(enabled, int, False, allow_falsy=True, allow_indirect=True)
    ],
    {       'args_sep': 'different_args_sep=',
        'enabled': True,
        'log_args': 'different_log_args_kwd=',
        'log_exit': True,
        'log_retval': False,
        'logger': 'different_logger_kwd=',
        'loglevel': 50,
        'prefix': 'prix-fixe.'}
)
inner function's log_calls_settings repr:
DecoSettingsMapping(
    [
        DecoSetting(log_args, bool, True, allow_falsy=True, allow_indirect=True),
        DecoSetting(log_exit, bool, True, allow_falsy=True, allow_indirect=True),
        DecoSetting(loglevel, int, 10, allow_falsy=False, allow_indirect=True),
        DecoSetting(prefix, str, '', allow_falsy=True, allow_indirect=False),
        DecoSetting(logger, logging.Logger, None, allow_falsy=True, allow_indirect=True),
        DecoSetting(args_sep, str, ', ', allow_falsy=False, allow_indirect=True),
        DecoSetting(log_retval, bool, False, allow_falsy=True, allow_indirect=True),
        DecoSetting(enabled, int, False, allow_falsy=True, allow_indirect=True)
    ],
    {       'args_sep': 'sepr8r_=',
        'enabled': 'doit=',
        'log_args': True,
        'log_exit': True,
        'log_retval': False,
        'logger': 'lgr_=',
        'loglevel': 10,
        'prefix': ''}
)
via instance of Klass:
instance method log_calls_settings: {'log_args': True, 'log_exit': True, 'loglevel': 10, 'prefix': 'Klass.instance.', 'logger': 'lager=', 'args_sep': ' + ', 'log_retval': False, 'enabled': False}
classmethod log_calls_settings: {'log_args': False, 'log_exit': True, 'loglevel': 10, 'prefix': 'Klass.klass.', 'logger': None, 'args_sep': ', ', 'log_retval': True, 'enabled': True}
staticmethod log_calls_settings: {'log_args': True, 'log_exit': True, 'loglevel': 10, 'prefix': 'Klass.statik.', 'logger': None, 'args_sep': ', ', 'log_retval': False, 'enabled': True}
via Klass:
classmethod log_calls_settings: {'log_args': False, 'log_exit': True, 'loglevel': 10, 'prefix': 'Klass.klass.', 'logger': None, 'args_sep': ', ', 'log_retval': True, 'enabled': True}
staticmethod log_calls_settings: {'log_args': True, 'log_exit': True, 'loglevel': 10, 'prefix': 'Klass.statik.', 'logger': None, 'args_sep': ', ', 'log_retval': False, 'enabled': True}
**********************************************************************
File "/Users/brianoneill/Desktop/Programming/Python-package-staging/log_calls/log_calls/tests/test_log_calls.py", line 136, in __main__.main__call_chains__inner_functions
Failed example:
    h5()
Expected:
    h5 <== called by <module>
    h4_inner <== called by h5
    h1_inner <== called by h2 <== h3 <== h4_inner
        args: y=3
    h0 <== called by h1_inner
        args: z=6
    h0 ==> returning to h1_inner
    h1_inner ==> returning to h2 ==> h3 ==> h4_inner
    h4_inner ==> returning to h5
    h5 ==> returning to <module>
Got:
    h5 <== called by <module>
    h4_inner <== called by h5 <== h5
    h1_inner <== called by h2 <== h3 <== h4_inner <== h4_inner
        args: y=3
    h0 <== called by h1_inner <== h1_inner
        args: z=6
    h0 ==> returning to h1_inner ==> h1_inner
    h1_inner ==> returning to h2 ==> h3 ==> h4_inner ==> h4_inner
    h4_inner ==> returning to h5 ==> h5
    h5 ==> returning to <module>
**********************************************************************
File "/Users/brianoneill/Desktop/Programming/Python-package-staging/log_calls/log_calls/tests/test_log_calls.py", line 164, in __main__.main__call_chains__inner_functions
Failed example:
    j3()
Expected:
    j3 <== called by <module>
    j2_inner <== called by j2 <== j3
    j0 <== called by j1 <== j2_inner
    j0 ==> returning to j1 ==> j2_inner
    j2_inner ==> returning to j2 ==> j3
    j3 ==> returning to <module>
Got:
    j3 <== called by <module>
    j2_inner <== called by j2 <== j3 <== j3
    j0 <== called by j1 <== j2_inner <== j2_inner
    j0 ==> returning to j1 ==> j2_inner ==> j2_inner
    j2_inner ==> returning to j2 ==> j3 ==> j3
    j3 ==> returning to <module>
**********************************************************************
File "/Users/brianoneill/Desktop/Programming/Python-package-staging/log_calls/log_calls/tests/test_log_calls.py", line 99, in __main__.main__call_chains__no_params_no_args
Failed example:
    g5()
Expected:
    g5 <== called by <module>
    g3 <== called by g4 <== g5
        args: <none>
    g1 <== called by g2 <== g3
    g1 ==> returning to g2 ==> g3
    g3 ==> returning to g4 ==> g5
    g5 ==> returning to <module>
Got:
    g5 <== called by <module>
    g3 <== called by g4 <== g5 <== g5
        args: <none>
    g1 <== called by g2 <== g3 <== g3
    g1 ==> returning to g2 ==> g3 ==> g3
    g3 ==> returning to g4 ==> g5 ==> g5
    g5 ==> returning to <module>
**********************************************************************
File "/Users/brianoneill/Desktop/Programming/Python-package-staging/log_calls/log_calls/tests/test_log_calls.py", line 542, in __main__.main__logging
Failed example:
    anotherfunc()       # doctest: +NORMALIZE_WHITESPACE
Expected:
    DEBUG:mylogger:anotherfunc <== called by <module>
    DEBUG:mylogger:somefunc <== called by anotherfunc
        args: v1=17, v2=19
    DEBUG:mylogger:36
    DEBUG:mylogger:somefunc ==> returning to anotherfunc
    DEBUG:mylogger:anotherfunc ==> returning to <module>
Got:
    DEBUG:mylogger:anotherfunc <== called by <module>
    DEBUG:mylogger:somefunc <== called by anotherfunc <== anotherfunc
        args: v1=17, v2=19
    DEBUG:mylogger:36
    DEBUG:mylogger:somefunc ==> returning to anotherfunc ==> anotherfunc
    DEBUG:mylogger:anotherfunc ==> returning to <module>
**********************************************************************
File "/Users/brianoneill/Desktop/Programming/Python-package-staging/log_calls/log_calls/tests/test_log_calls.py", line 583, in __main__.main__logging
Failed example:
    t(1,2,3, enable=True, sep_='\n', logger_=logger)       # doctest: +NORMALIZE_WHITESPACE, +ELLIPSIS
Expected:
    DEBUG:mylogger:t <== called by <module>
        args:
            x=1
            y=2
            z=3
            [**]kwargs={...}
    DEBUG:mylogger:r <== called by s <== t
        args:
            x=1
            y=2
            z=3
            [**]kwargs={...}
    5
    DEBUG:mylogger:r ==> returning to s ==> t
    DEBUG:mylogger:t ==> returning to <module>
Got:
    DEBUG:mylogger:t <== called by <module>
        args:
            x=1
            y=2
            z=3
            [**]kwargs={'enable': True, 'sep_': '\n', 'logger_': <logging.Logger object at 0x10124e320>}
    DEBUG:mylogger:r <== called by s <== t <== t
        args:
            x=1
            y=2
            z=3
            [**]kwargs={'enable': True, 'sep_': '\n', 'logger_': <logging.Logger object at 0x10124e320>}
    5
    DEBUG:mylogger:r ==> returning to s ==> t ==> t
    DEBUG:mylogger:t ==> returning to <module>
**********************************************************************
File "/Users/brianoneill/Desktop/Programming/Python-package-staging/log_calls/log_calls/tests/test_log_calls.py", line 668, in __main__.main__logging
Failed example:
    infrequent()       # doctest: +NORMALIZE_WHITESPACE
Expected:
    [FILE]     INFO:mylogger: infrequent <== called by <module>
    INFO:mylogger:infrequent <== called by <module>
    [FILE]    DEBUG:mylogger: popular <== called by infrequent
    [FILE]    DEBUG:mylogger: popular ==> returning to infrequent
    [FILE]     INFO:mylogger: infrequent ==> returning to <module>
    INFO:mylogger:infrequent ==> returning to <module>
Got:
    [FILE]     INFO:mylogger: infrequent <== called by <module>
    INFO:mylogger:infrequent <== called by <module>
    [FILE]    DEBUG:mylogger: popular <== called by infrequent <== infrequent
    [FILE]    DEBUG:mylogger: popular ==> returning to infrequent ==> infrequent
    [FILE]     INFO:mylogger: infrequent ==> returning to <module>
    INFO:mylogger:infrequent ==> returning to <module>
**********************************************************************
File "/Users/brianoneill/Desktop/Programming/Python-package-staging/log_calls/log_calls/tests/test_log_calls.py", line 209, in __main__.main__methods__prefixes
Failed example:
    print("length of Point(1, 2) =", round(Point(1, 2).length(), 2))  # doctest: +ELLIPSIS
Expected:
    Point.length <== called by <module>
        args: self=Point(1, 2)
    Point.distance <== called by Point.length
        args: pt1=Point(1, 2), pt2=Point(0, 0)
    Point.distance ==> returning to Point.length
        Point.length return value: 2.236...
    Point.length ==> returning to <module>
    length of Point(1, 2) = 2.24
Got:
    Point.length <== called by <module>
        args: self=Point(1, 2)
    Point.distance <== called by length <== Point.length
        args: pt1=Point(1, 2), pt2=Point(0, 0)
    Point.distance ==> returning to length ==> Point.length
        Point.length return value: 2.23606797749979
    Point.length ==> returning to <module>
    length of Point(1, 2) = 2.24
**********************************************************************
File "/Users/brianoneill/Desktop/Programming/Python-package-staging/log_calls/log_calls/tests/test_log_calls.py", line 299, in __main__.main__static_dynamic_parameter_values__dynamic_control
Failed example:
    func2(17, enable=True)
Expected:
    func2 <== called by <module>
        args: z=17, [**]kwargs={'enable': True}
    func1 <== called by func2
        args: a=17, b=18, c=19, [**]kwargs={'enable': True}
    func1 ==> returning to func2
    func2 ==> returning to <module>
Got:
    func2 <== called by <module>
        args: z=17, [**]kwargs={'enable': True}
    func1 <== called by func2 <== func2
        args: a=17, b=18, c=19, [**]kwargs={'enable': True}
    func1 ==> returning to func2 ==> func2
    func2 ==> returning to <module>
**********************************************************************
File "/Users/brianoneill/Desktop/Programming/Python-package-staging/log_calls/log_calls/tests/test_log_calls.py", line 369, in __main__.main__static_dynamic_parameter_values__dynamic_control
Failed example:
    g(1,2,3, 42, 99, sep_='\n')       # doctest: +NORMALIZE_WHITESPACE
Expected:
    g <== called by <module>
        args:
            a=1
            b=2
            c=3
            [*]args=(42, 99)
            [**]kwargs={'sep_': '\n'}
    f <== called by g
        args:
            a=1
            b=2
            c=3
            [**]kwargs={'sep_': '\n'}
    6
    f ==> returning to g
    g ==> returning to <module>
Got:
    g <== called by <module>
        args:
            a=1
            b=2
            c=3
            [*]args=(42, 99)
            [**]kwargs={'sep_': '\n'}
    f <== called by g <== g
        args:
            a=1
            b=2
            c=3
            [**]kwargs={'sep_': '\n'}
    6
    f ==> returning to g ==> g
    g ==> returning to <module>
**********************************************************************
File "/Users/brianoneill/Desktop/Programming/Python-package-staging/log_calls/log_calls/tests/test_log_calls.py", line 400, in __main__.main__static_dynamic_parameter_values__dynamic_control
Failed example:
    for i in range(2):
        h(i, i+1, 'a', 'b', u='somebody', enable=i%2, sep_=', ')       # doctest: +NORMALIZE_WHITESPACE, +ELLIPSIS
Expected:
    h <== called by <module>
        args: a=1, b=2, [*]args=('a', 'b'), enable=1, [**]kwargs={...}
    g <== called by h
        args: a=1, b=2, c=10, [*]args=('a', 'b'), [**]kwargs={...}
    f <== called by g
        args: a=1, b=2, c=10, u='somebody', [**]kwargs={'sep_': ', '}
    13
    f ==> returning to g
    g ==> returning to h
    h ==> returning to <module>
Got:
    h <== called by <module>
        args: a=1, b=2, [*]args=('a', 'b'), enable=1, [**]kwargs={'sep_': ', ', 'u': 'somebody'}
    g <== called by h <== h
        args: a=1, b=2, c=10, [*]args=('a', 'b'), [**]kwargs={'sep_': ', ', 'u': 'somebody'}
    f <== called by g <== g
        args: a=1, b=2, c=10, u='somebody', [**]kwargs={'sep_': ', '}
    13
    f ==> returning to g ==> g
    g ==> returning to h ==> h
    h ==> returning to <module>
**********************************************************************
5 items had failures:
   2 of  12 in __main__.main__call_chains__inner_functions
   1 of   6 in __main__.main__call_chains__no_params_no_args
   3 of  34 in __main__.main__logging
   1 of   4 in __main__.main__methods__prefixes
   3 of  40 in __main__.main__static_dynamic_parameter_values__dynamic_control
***Test Failed*** 10 failures.

Process finished with exit code 0
