##########
TODOs
##########

Document:
    display name has ``__name__`` in parens following ``__qualname__`` iff
        * ``name`` param not given and
        * ``__name__`` not a substring of ``__qualname__``

    Motivated by fractions.Fraction.__sub__ and the like -- qualname of ``__sub__``
    ``__add__`` et al is a closure, inner function ``forward`` of ``Fraction._operator_fallbacks``
    (qualname = ``Fraction._operator_fallbacks.<locals>.forward``)
    See section "decorating external blah" in Quick Start.

Add this (above) new behavior to What's New (create new subsection "What's Changed" for 0.3.1)

What's New:
    mention that the new methods and global exist on ``record_history`` too

``record_history`` docs:
    update for new ``log_*`` methods

Â¿Add ``log_calls.NO_DECO`` global?
    If so, doc it, in at least these chapters:
        What's New
        Writing `log_calls`-aware debugging messages

Add/write section in Quick Start for writing `log_calls`-aware debugging messages.

Finish doc'ing log_* methods: older deprecated classmethods (of a deco'd class)


------
 DONE
------
Display name of a deco'd callable has ``__name__`` in parens following ``__qualname__`` if
        * ``name`` param not given and
        * ``__name__`` not a substring of ``__qualname__``

    Inspired by fractions.Fraction.__sub__ and the like -- see section
    "decorating external blah" in Quick Start.


Simplified debug messages and expression "dumps":

        log_calls.log_message(...)
        log_calls.log_exprs(...)

    which figure out the right thing to do.
    Works for `record_history` too.

======================================
Features that WON'T be in v0.3.0
======================================

record_history
-----------------

    Support the `file` keyword parameter? as a setting?
        Can use `log_*` methods, and output is always via print,
        BUT also always to `sys.stdout`. Allow `sys.stderr` at least.

    Support the `override` parameter?
        After all, it can deco classes and it supports decorate_* methods.
        CHECK THIS: does it not support `override`???

    `record_history` does or does not support `set_defaults()`, `reset_defaults()`?

log_calls
-------------

    `file` parameter: allow string pathnames?
        Probably NOT, but think about it.

    Added attributes `log_calls_omit` and `log_calls_only` to deco'd classes
    (used in testing & debugging -- TODO : comment out or "if ___" out in release?)
    Ditto `record_history_omit`, `record_history_only`    (TODO; document or delete)



==============
TESTS
==============

    `record_history` does or does not support `set_defaults()`, `reset_defaults()`?
        Verify/refute
        DOC (What's New) implies that only `log_calls` does:
            * `log_calls` has classmethods to globally set and reset
              default values for settings, program-wide:
        Adjust if need be

    `record_history` with `decorate_*` methods
        They work?
        DOC says they do

==============
MISC
==============
Download latest Python 3.5.y (3.5.1 ?);
run `run_tests`

